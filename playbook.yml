- hosts: localhost
  connection: localhost
  gather_facts: false

  vars:
    group_name: challenge-sg
    local_pc_public_ip: 77.126.63.26
    ansible_internal_ip: 15.1.0.71
    ec2_region: eu-west-3 
    ec2_instance_ami: ami-0bb607148d8cf36fb 
    ec2_instance_type: t2.micro
    ec2_instance_count: 1
    ec2_instance_env:
      BOTO_USE_ENDPOINT_HEURISTICS: True

  tasks:
  - name: Create SG
    ec2_group:
      name: "{{ group_name }}"
      description: challenge-sg
      #vpc_id: vpc-0df1bf6ab5fa59802 # use whe there is not defalt VPC. ask them if there is no default how to fetch the needed vpc.
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: "{{ local_pc_public_ip }}/32"
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: "{{ local_pc_public_ip }}/32"
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: "{{ ansible_internal_ip }}/32"
      rules_egress:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0

  - name: ec2 creation
    ec2:
      group: "{{ group_name }}"
      instance_type: "{{ ec2_instance_type }}"
      image: "{{ ec2_instance_ami }}"
      region: "{{ ec2_region }}"
      # vpc_subnet_id: subnet-04affe8f844493ab8 # In case public IP is needed. ask them.
      # assign_public_ip: yes
      wait: yes
      wait_timeout: 500
      count: "{{ ec2_instance_count }}"
      instance_tags: 
        EnvName: Test Environment
    environment: "{{ ec2_instance_env }}"
    register: ec2_instance